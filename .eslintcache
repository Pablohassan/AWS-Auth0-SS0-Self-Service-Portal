[{"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/App.tsx":"1","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/assets/accounts.js":"2","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/assets/regions.js":"3","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/assets/roles.js":"4","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/components/ListInstancesTable.tsx":"5","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/components/LoginButton.tsx":"6","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/components/Navbar.tsx":"7","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/components/ProtectedRoutes.tsx":"8","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/index.tsx":"9","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/pages/LoginPage.tsx":"10","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/pages/PageError404.tsx":"11","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/pages/startStopEC2.tsx":"12","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/providers/AwsProvider.tsx":"13","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/providers/Context.tsx":"14","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/providers/CredentialsProvider.tsx":"15","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/providers/RouterProviderSelf.tsx":"16","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/reportWebVitals.ts":"17","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/services/profile.js":"18"},{"size":1217,"mtime":1676553271853,"results":"19","hashOfConfig":"20"},{"size":2564,"mtime":1676556182213,"results":"21","hashOfConfig":"20"},{"size":1249,"mtime":1676556154736,"results":"22","hashOfConfig":"20"},{"size":245,"mtime":1676556154736,"results":"23","hashOfConfig":"20"},{"size":3412,"mtime":1676556265098,"results":"24","hashOfConfig":"20"},{"size":353,"mtime":1676552592619,"results":"25","hashOfConfig":"20"},{"size":3740,"mtime":1676556924214,"results":"26","hashOfConfig":"20"},{"size":519,"mtime":1676552592654,"results":"27","hashOfConfig":"20"},{"size":855,"mtime":1676553271854,"results":"28","hashOfConfig":"20"},{"size":1247,"mtime":1676553271854,"results":"29","hashOfConfig":"20"},{"size":381,"mtime":1676553271855,"results":"30","hashOfConfig":"20"},{"size":8884,"mtime":1676901419670,"results":"31","hashOfConfig":"20"},{"size":1023,"mtime":1676552592725,"results":"32","hashOfConfig":"20"},{"size":172,"mtime":1676552592732,"results":"33","hashOfConfig":"20"},{"size":1443,"mtime":1676553271855,"results":"34","hashOfConfig":"20"},{"size":1280,"mtime":1676552592751,"results":"35","hashOfConfig":"20"},{"size":421,"mtime":1676556154736,"results":"36","hashOfConfig":"20"},{"size":616,"mtime":1676556154736,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9ywbdh",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/App.tsx",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/assets/accounts.js",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/assets/regions.js",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/assets/roles.js",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/components/ListInstancesTable.tsx",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/components/LoginButton.tsx",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/components/Navbar.tsx",[],["93","94","95"],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/components/ProtectedRoutes.tsx",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/index.tsx",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/pages/LoginPage.tsx",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/pages/PageError404.tsx",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/pages/startStopEC2.tsx",["96","97","98","99","100","101","102"],["103","104"],"import {useState, useContext, useEffect} from 'react';\nimport {AssumeRoleCommand, Credentials, STSClient} from '@aws-sdk/client-sts';\nimport {DescribeInstancesCommand, EC2Client, Instance, StartInstancesCommand, StopInstancesCommand} from '@aws-sdk/client-ec2';\nimport {Button, Container} from '@nextui-org/react';\nimport toast, {Toaster} from 'react-hot-toast';\nimport {useNavigate} from 'react-router-dom';\nimport AwsProvider, {AccountContext, RegionContext, RoleContext} from '../providers/AwsProvider';\nimport ListInstancesTable from '../components/ListInstancesTable';\n\n// here we define\ninterface Props {\n  credentials: Credentials | undefined;\n  account: string | undefined;\n  region: string | undefined;\n  role: string | undefined;\n  startTime?: number;\n}\n\nconst ListInstances: React.FC<Props> = ({credentials}) => {\n  const [instances, setInstances] = useState<(Instance | undefined)[] | undefined>();\n  const [account] = useContext(AccountContext);\n  const [region] = useContext(RegionContext);\n  const [role] = useContext(RoleContext);\n  const [startTime, setStartTime] = useState<{[key: string]: number}>({});\n  const [selectedInstanceId, setSelectedInstanceId] = useState<string | undefined>(undefined);\n\n  // Load all instances of account region and role  use default state if not sepcified\n\n  useEffect(() => {\n    if (account && role && region) {\n      loadInstances();\n    }\n  }, [account, role, region]);\n\n  console.log(instances?.[0]?.State?.Code);\n\n  // intitialisation of EC2 Client with credentials from CredentialProvider\n  const createEC2Client = async () => {\n    if (!credentials?.AccessKeyId || !credentials?.SecretAccessKey) return;\n\n    // Assume the role of the AWS account created role with new credentials\n    const {Credentials: stsCredentials} = await new STSClient({\n      region,\n      credentials: {\n        accessKeyId: credentials?.AccessKeyId,\n        secretAccessKey: credentials?.SecretAccessKey,\n        sessionToken: credentials?.SessionToken,\n        expiration: credentials?.Expiration\n      }\n    }).send(\n      // there we assumiong role\n      new AssumeRoleCommand({\n        RoleArn: `arn:aws:iam::${account}:role/${role}`,\n        RoleSessionName: `test`\n      })\n    );\n\n    if (!stsCredentials?.AccessKeyId || !stsCredentials?.SecretAccessKey) return; // eslint-disable-line\n    // eslint-disable-next-line\n    return new EC2Client({\n      credentials: {\n        accessKeyId: stsCredentials?.AccessKeyId,\n        secretAccessKey: stsCredentials?.SecretAccessKey,\n        sessionToken: stsCredentials?.SessionToken,\n        expiration: stsCredentials?.Expiration\n      }\n    });\n  };\n  // There we load all instances in our useSate instances\n  const loadInstances = async () => {\n    try {\n      const ec2Client = await createEC2Client();\n      if (!ec2Client) return;\n      // There we get all instances for the given user credentials and AWS region in response\n      const response = await ec2Client.send(new DescribeInstancesCommand({}));\n      // Store the instances in the component state.\n      setInstances(\n        response?.Reservations?.flatMap(reservation => reservation.Instances)\n          .map(instance => instance)\n          .filter(instance => !!instance)\n      );\n    } catch (err: any) {\n      if (err.code) {\n        console.log(err.code);\n      } else {\n        console.log(err);\n      }\n    }\n  };\n\n  // Refresh instances list if the selected instance or the instance state changes.\n\n  useEffect(() => {\n    const refreshInstances = async () => {\n      await loadInstances();\n    };\n\n    if (selectedInstanceId && instances) {\n      const selectedInstance = instances.find(instance => instance?.InstanceId === selectedInstanceId);\n      if (!selectedInstance) {\n        setSelectedInstanceId(undefined);\n      }\n    }\n    if (instances?.every(instance => instance?.State?.Code === 80 || instance?.State?.Code === 16)) return;\n    refreshInstances();\n    return () => {}; // eslint-disable-line\n  }, [instances, selectedInstanceId, loadInstances]);\n\n  const navigate = useNavigate();\n\n  function handleButtonClick() {\n    setInstances([]);\n    navigate('');\n  }\n\n  const startInstance = async (selectedInstanceId: string | undefined) => {\n    if (!selectedInstanceId || !credentials?.AccessKeyId || !credentials?.SecretAccessKey) return;\n    try {\n      setSelectedInstanceId(selectedInstanceId);\n      setStartTime({...startTime, [selectedInstanceId]: Date.now()});\n      const ec2Client = await createEC2Client();\n      if (!ec2Client) return;\n      // We use ec2Client created previously with assumed credentials to run  DescribeInstancesCommand to read state of instances\n      const describeInstance = await ec2Client.send(\n        new DescribeInstancesCommand({\n          InstanceIds: [selectedInstanceId]\n        })\n      );\n      const instances = describeInstance.Reservations?.[0]?.Instances;\n\n      if (!instances) throw new Error('No Instances found in this Reservations');\n      const instance_state = instances?.[0]?.State?.Code;\n      // Only start the instance if it's currently stopped\n      if (instance_state === 16) {\n        toast.error(`Instance ${selectedInstanceId} is already running`);\n      } else if (instance_state === 0) {\n        toast.error(`Instance ${selectedInstanceId} is already pending`);\n      } else if (instance_state === 32) {\n        toast.error(`Instance ${selectedInstanceId} is shutting-down`);\n      } else if (instance_state === 64) {\n        toast.error(`Instance ${selectedInstanceId} is stopping`);\n      } else {\n        // Then we send startIntance Command to selected instance\n        // We use ec2Client created previously with assumed credentials to run StartInstancesCommand and read state of instances\n        await ec2Client.send(\n          new StartInstancesCommand({\n            InstanceIds: [selectedInstanceId]\n          })\n        );\n        setStartTime({[selectedInstanceId]: Date.now()});\n\n        await loadInstances();\n      }\n      console.log('reloaded');\n      if (instance_state === 16) {\n        toast.success(`Instances  ${selectedInstanceId} est demmaré`);\n      }\n    } catch (err: unknown) {\n      toast.error(`Une erreur a empeché le demmarage de l'instance ${selectedInstanceId}: ${(err as Error).message}`);\n    }\n    toast.success(`Instances  ${selectedInstanceId} est en cours de demmarage `);\n  };\n\n  const stopInstance = async (selectedInstanceId: string | undefined) => {\n    if (selectedInstanceId && credentials?.AccessKeyId && credentials?.SecretAccessKey) {\n      setSelectedInstanceId(selectedInstanceId);\n      try {\n        const ec2Client = await createEC2Client();\n        if (!ec2Client) return;\n\n        const describeInstance = await ec2Client.send(\n          new DescribeInstancesCommand({\n            InstanceIds: [selectedInstanceId]\n          })\n        );\n        const instances = describeInstance.Reservations?.[0]?.Instances;\n\n        if (!instances) throw new Error('No Instances found in this Reservations');\n        const instance_state = instances?.[0]?.State?.Code;\n        if (instance_state === 80) {\n          toast.error(`Instance ${selectedInstanceId} is already stopped`);\n        } else if (instance_state === 0) {\n          toast.error(`Instance ${selectedInstanceId} is already pending`);\n        } else if (instance_state === 32) {\n          toast.error(`Instance ${selectedInstanceId} is shutting-down`);\n        } else if (instance_state === 64) {\n          toast.error(`Instance ${selectedInstanceId} is stopping`);\n        } else {\n          await ec2Client.send(\n            new StopInstancesCommand({\n              InstanceIds: [selectedInstanceId]\n            })\n          );\n        }\n        await loadInstances();\n\n        if (instance_state === 80) {\n          toast.success(`Instances  ${selectedInstanceId} est arrété`);\n        }\n      } catch (err: unknown) {\n        toast.error(`Une erreur a empeché l'arret' de l'instance ${selectedInstanceId}: ${(err as Error).message}`);\n      }\n    }\n    toast.success(`Instances  ${selectedInstanceId} est en cours d'arret`);\n  };\n\n  return (\n    <div>\n      <AwsProvider>\n        <Container css={{display: 'flex', flexDirection: 'row-reverse', margin: 'auto'}}>\n          <Button css={{m: 10, mr: '5%'}} auto ghost rounded color=\"gradient\" bordered onClick={() => handleButtonClick}>\n            Refresh\n          </Button>\n        </Container>\n        {account && region && role && (\n          <div>\n            {instances && (\n              <ListInstancesTable\n                instances={instances}\n                startTime={startTime[Object.keys(startTime)[0]]}\n                startInstance={startInstance}\n                stopInstance={stopInstance}\n              />\n            )}\n          </div> // eslint-disable-line\n        )}\n        <Toaster />\n      </AwsProvider>\n    </div>\n  );\n};\n\nexport default ListInstances;\n","/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/providers/AwsProvider.tsx",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/providers/Context.tsx",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/providers/CredentialsProvider.tsx",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/providers/RouterProviderSelf.tsx",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/reportWebVitals.ts",[],[],"/Users/rusmirsadikovic/galilee/Self-Service-Portal-Galilee/ssp-front-end/src/services/profile.js",[],[],{"ruleId":"105","severity":1,"message":"106","line":40,"column":10,"nodeType":"107","messageId":"108","endLine":40,"endColumn":17,"suppressions":"109"},{"ruleId":"105","severity":1,"message":"110","line":41,"column":10,"nodeType":"107","messageId":"108","endLine":41,"endColumn":16,"suppressions":"111"},{"ruleId":"105","severity":1,"message":"112","line":42,"column":10,"nodeType":"107","messageId":"108","endLine":42,"endColumn":14,"suppressions":"113"},{"ruleId":"114","severity":1,"message":"115","line":31,"column":7,"nodeType":"107","messageId":"116","endLine":31,"endColumn":20},{"ruleId":"117","severity":1,"message":"118","line":33,"column":6,"nodeType":"119","endLine":33,"endColumn":29,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":35,"column":3,"nodeType":"123","messageId":"124","endLine":35,"endColumn":14},{"ruleId":"117","severity":1,"message":"125","line":70,"column":9,"nodeType":"126","endLine":89,"endColumn":4,"suggestions":"127"},{"ruleId":"121","severity":1,"message":"122","line":84,"column":9,"nodeType":"123","messageId":"124","endLine":84,"endColumn":20},{"ruleId":"121","severity":1,"message":"122","line":86,"column":9,"nodeType":"123","messageId":"124","endLine":86,"endColumn":20},{"ruleId":"121","severity":1,"message":"122","line":154,"column":7,"nodeType":"123","messageId":"124","endLine":154,"endColumn":18},{"ruleId":"128","severity":2,"message":"129","line":60,"column":5,"nodeType":"130","messageId":"131","endLine":67,"endColumn":8,"suppressions":"132"},{"ruleId":"128","severity":2,"message":"133","line":106,"column":5,"nodeType":"130","messageId":"131","endLine":106,"endColumn":21,"suppressions":"134"},"@typescript-eslint/no-unused-vars","'account' is assigned a value but never used.","Identifier","unusedVar",["135"],"'region' is assigned a value but never used.",["136"],"'role' is assigned a value but never used.",["137"],"@typescript-eslint/no-use-before-define","'loadInstances' was used before it was defined.","noUseBeforeDefine","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadInstances'. Either include it or remove the dependency array.","ArrayExpression",["138"],"no-console","Unexpected console statement.","MemberExpression","unexpected","The 'loadInstances' function makes the dependencies of useEffect Hook (at line 107) change on every render. To fix this, wrap the definition of 'loadInstances' in its own useCallback() Hook.","VariableDeclarator",["139"],"consistent-return","Async arrow function expected no return value.","ReturnStatement","unexpectedReturnValue",["140"],"Arrow function expected no return value.",["141"],{"kind":"142","justification":"143"},{"kind":"142","justification":"143"},{"kind":"142","justification":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"kind":"142","justification":"143"},{"kind":"142","justification":"143"},"directive","","Update the dependencies array to be: [account, role, region, loadInstances]",{"range":"148","text":"149"},"Wrap the definition of 'loadInstances' in its own useCallback() Hook.",{"range":"150","text":"151"},[1397,1420],"[account, role, region, loadInstances]",[2717,3368],"useCallback(async () => {\n    try {\n      const ec2Client = await createEC2Client();\n      if (!ec2Client) return;\n      // There we get all instances for the given user credentials and AWS region in response\n      const response = await ec2Client.send(new DescribeInstancesCommand({}));\n      // Store the instances in the component state.\n      setInstances(\n        response?.Reservations?.flatMap(reservation => reservation.Instances)\n          .map(instance => instance)\n          .filter(instance => !!instance)\n      );\n    } catch (err: any) {\n      if (err.code) {\n        console.log(err.code);\n      } else {\n        console.log(err);\n      }\n    }\n  })"]